name: Auto Build & Deploy

on:
  schedule:
    - cron: '*/5 * * * *'  # 每5分钟运行一次
  workflow_dispatch:       # 允许手动触发
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HUGO_CACHEDIR: /tmp/hugo_cache  # 缓存目录[5](@ref)
    
    steps:
    # 步骤1: 调试信息 - 工作流开始
    - name: Debug - Workflow Start
      run: |
        echo "=== 工作流开始 ==="
        echo "运行时间: $(date)"
        echo "触发事件: ${{ github.event_name }}"
        echo "工作流ID: ${{ github.run_id }}"
        echo "仓库: ${{ github.repository }}"
        
    # 步骤2: 检出代码
    - name: Checkout Source
      uses: actions/checkout@v4  # 使用v4避免Node.js版本问题[2](@ref)
      with:
        submodules: 'true'  # 如果使用主题子模块需要这个
        fetch-depth: 0
      timeout-minutes: 5
      
    # 步骤3: 调试 - 检查仓库结构
    - name: Debug - Repository Structure
      run: |
        echo "=== 仓库文件结构 ==="
        find . -name "*.md" -o -name "*.toml" -o -name "*.yaml" -o -name "*.yml" | sort
        echo "--- 配置文件内容 ---"
        if [ -f "config.toml" ]; then
          cat config.toml
        elif [ -f "config.yaml" ]; then
          cat config.yaml
        elif [ -f "config.yml" ]; then
          cat config.yml
        else
          echo "未找到配置文件"
        fi
        echo "--- themes目录 ---"
        ls -la themes/ 2>/dev/null || echo "themes目录不存在"
        
    # 步骤4: 设置Hugo
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v3  # 使用v3版本[5](@ref)
      with:
        hugo-version: '0.119.0'  # 指定稳定版本避免兼容性问题[2](@ref)
        extended: true  # 必须使用extended版本支持SCSS[1](@ref)
        
    # 步骤5: 调试 - Hugo版本信息
    - name: Debug - Hugo Version
      run: |
        echo "=== Hugo版本信息 ==="
        hugo version
        echo "Hugo环境变量:"
        echo "HUGO_CACHEDIR: $HUGO_CACHEDIR"
        
    # 步骤6: 缓存Hugo模块（优化构建速度）
    - name: Cache Hugo Modules
      uses: actions/cache@v4
      with:
        path: ${{ env.HUGO_CACHEDIR }}
        key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-hugomod-
          
    # 步骤7: 生成新文章（修复版）
    - name: Generate New Post
      run: |
        echo "=== 开始生成新文章 ==="
        POST_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        FILENAME=$(date -u +"%Y%m%d%H%M%S")
        
        echo "文章文件名: posts/$FILENAME.md"
        echo "生成时间: $POST_DATE"
        
        # 确保content/posts目录存在
        mkdir -p content/posts
        echo "创建目录: content/posts"
        
        # 使用hugo new命令创建文章[9](@ref)
        hugo new posts/$FILENAME.md
        
        # 检查文件是否创建成功
        if [ -f "content/posts/$FILENAME.md" ]; then
          echo "✅ 文章创建成功: content/posts/$FILENAME.md"
          # 添加内容到文章
          cat >> "content/posts/$FILENAME.md" << EOF
        
        ---
        auto_generated: true
        generated_time: $POST_DATE
        ---
        
        # 自动生成的文章 - $FILENAME
        
        这篇文章是在 **$POST_DATE** 自动生成的。
        
        ## 随机内容
        当前时间戳: $FILENAME
        运行ID: ${{ github.run_id }}
        
        > 这是通过GitHub Action自动生成的内容示例。
        
        EOF
          echo "✅ 文章内容已添加"
        else
          echo "❌ 文章创建失败"
          exit 1
        fi
        
        echo "=== 当前文章列表 ==="
        ls -la content/posts/
        
    # 步骤8: 构建网站
    - name: Build Site
      run: |
        echo "=== 开始构建网站 ==="
        echo "清理旧构建..."
        rm -rf public
        
        echo "执行Hugo构建..."
        hugo --minify --buildDrafts -v --cleanDestinationDir
        
        echo "=== 构建结果 ==="
        if [ -d "public" ]; then
          echo "✅ 构建成功"
          echo "public目录内容:"
          ls -la public/
          echo "生成的HTML文件数量:"
          find public -name "*.html" | wc -l
        else
          echo "❌ 构建失败 - public目录不存在"
          exit 1
        fi
        
    # 步骤9: 调试 - 检查构建输出
    - name: Debug - Build Output
      run: |
        echo "=== 构建详细检查 ==="
        if [ -f "public/index.html" ]; then
          echo "✅ 首页文件存在"
          echo "首页前10行:"
          head -10 public/index.html
        else
          echo "❌ 首页文件不存在"
        fi
        
    # 步骤10: 部署到GitHub Pages
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
        external_repository: jwj330/jwj330.github.io
        publish_branch: main
        publish_dir: ./public
        commit_message: "Auto-deploy: ${{ github.run_id }} - $(date -u +'%Y-%m-%d %H:%M:%S')"
        force_orphan: false
      timeout-minutes: 10
      
    # 步骤11: 工作流完成调试
    - name: Debug - Workflow Complete
      if: always()
      run: |
        echo "=== 工作流执行总结 ==="
        echo "结束时间: $(date)"
        echo "运行状态: ${{ job.status }}"
        echo "=== 调试信息汇总 ==="
        echo "1. 仓库结构检查: 完成"
        echo "2. Hugo设置: 完成"
        echo "3. 文章生成: 完成" 
        echo "4. 网站构建: 完成"
        echo "5. 部署: ${{ job.status }}"
